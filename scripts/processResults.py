#!/usr/bin/python
#
# author : prashant kumar kuntala
# date   : 4th January, 2019
#


"""
Program to process the Results downloaded using 'downloadResults.py'

NOTES:
-----
TERMINAL colors

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

"""

import sys, os, argparse
import pprint,shutil

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('workflowInvokeFile',help='WorkflowInvokeFile generated by the yepQCVIZ pipeline')
    parser.add_argument('srcPath',help='Path to the Results directory created by downloadResults script')
    parser.add_argument('destPath',help='Path to the destination folder')
    args = parser.parse_args()

    samples = [] # to store the sample from file
    openfile = open(args.workflowInvokeFile,'r').readlines()
    for line in openfile:
        if not line.startswith('#'):
            temp = line.split(',')
            samples.append("_".join(temp[1:3]))
    # pprint.pprint(samples)

    # absolute path to the Results folder created by downloadResults.py
    srcPath = os.path.abspath(args.srcPath)

    # Absolute paths to various output folders
    nfrPath = os.path.abspath(args.destPath)+"/NFR"
    tssPath = os.path.abspath(args.destPath)+"/TSS"
    tesPath = os.path.abspath(args.destPath)+"/TES"
    cutPath = os.path.abspath(args.destPath)+"/CUT"
    sutPath = os.path.abspath(args.destPath)+"/SUT"
    xutPath = os.path.abspath(args.destPath)+"/XUT"
    trnaPath = os.path.abspath(args.destPath)+"/TRNA"
    xelementPath = os.path.abspath(args.destPath)+"/Xelement"
    centromerePath = os.path.abspath(args.destPath)+"/Centromere"
    arsPath = os.path.abspath(args.destPath)+"/ARS"
    memePath = os.path.abspath(args.destPath)+"/Meme"
    fimoPath = os.path.abspath(args.destPath)+"/FIMO"
    allfeaturesPath = os.path.abspath(args.destPath)+"/AllFeatures"
    boundfeaturesPath = os.path.abspath(args.destPath)+"/BoundFeatures"
    enrichedfeaturesPath = os.path.abspath(args.destPath)+"/EnrichedFeatures"
    bamPath = os.path.abspath(args.destPath)+"/Bam"
    peaksPath = os.path.abspath(args.destPath)+"/Peaks"
    subsectorPath = os.path.abspath(args.destPath)+"/Subsector"
    bigWigPath = os.path.abspath(args.destPath)+"/BigWig"
    bigBedPath = os.path.abspath(args.destPath)+"/BigBed"

    # used to check if the destination directories exist and create one if it doesn't
    destinationList = [nfrPath,tssPath,tesPath,cutPath,sutPath,xutPath,trnaPath,xelementPath,centromerePath,arsPath,memePath,fimoPath,allfeaturesPath,boundfeaturesPath,enrichedfeaturesPath,bamPath,peaksPath,subsectorPath,bigWigPath,bigBedPath]

    # checking and creating destinations
    for path in destinationList:
        if os.path.isdir(path):
            print "\033[94m {} Folder exists \033[0m".format(path.split('/')[-1:][0])
        else:
            print "\033[95m Creating folder : {} \033[0m".format(path.split('/')[-1:][0])
            os.mkdir(path)


    # walking the directory structure
    for root, dirs, files in os.walk(srcPath, topdown=True):
        prefix = (root.split("/")[-1:][0]).upper()
        
        # looking for memelogo directory
        for dirname in dirs:
            if dirname in samples:
                print "\n\033[95m Processing : {} \033[0m".format(dirname)
            # copying the memelogos
            if dirname == "memelogos":
                source = os.path.join(root, dirname)
                desdirname =  prefix + "_memelogos"
                destination = os.path.join(memePath,desdirname)
                # print destination
                if os.path.exists(destination):
                    continue
                else:
                    print "\033[94m Copying MEME \033[0m"
                    shutil.copytree(source,destination,symlinks=False)
                    # print destination

        # copying Individual bedfiles,heatmaps,composites
        for filename in files:
            if filename.startswith(prefix + "_AllFeatures"):
                source = os.path.join(root, filename)
                destination = os.path.join(allfeaturesPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_BoundFeatures") or filename.startswith(prefix + "_GENEMID"):
                source = os.path.join(root, filename)
                destination = os.path.join(boundfeaturesPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedFeatures"):
                source = os.path.join(root, filename)
                destination = os.path.join(enrichedfeaturesPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedNFR"):
                source = os.path.join(root, filename)
                destination = os.path.join(nfrPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_NFR"):
                source = os.path.join(root, filename)
                destination = os.path.join(nfrPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedTSS"):
                source = os.path.join(root, filename)
                destination = os.path.join(tssPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_TSS"):
                source = os.path.join(root, filename)
                destination = os.path.join(tssPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedTES"):
                source = os.path.join(root, filename)
                destination = os.path.join(tesPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_TES"):
                source = os.path.join(root, filename)
                destination = os.path.join(tesPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedCUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(cutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_CUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(cutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedSUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(sutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_SUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(sutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_EnrichedXUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(xutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_XUT"):
                source = os.path.join(root, filename)
                destination = os.path.join(xutPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_TRNA"):
                source = os.path.join(root, filename)
                destination = os.path.join(trnaPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_X-ELEMENT"):
                source = os.path.join(root, filename)
                destination = os.path.join(xelementPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_CENTROMERE"):
                source = os.path.join(root, filename)
                destination = os.path.join(centromerePath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_ARS"):
                source = os.path.join(root, filename)
                destination = os.path.join(arsPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_Motif"):
                source = os.path.join(root, filename)
                destination = os.path.join(memePath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_Subsector"):
                source = os.path.join(root, filename)
                destination = os.path.join(subsectorPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_FIMO_Motifs"):
                source = os.path.join(root, filename)
                destination = os.path.join(fimoPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.endswith("_filtered.bam"):
                source = os.path.join(root, filename)
                destination = os.path.join(bamPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.endswith("Strand.bw"):
                source = os.path.join(root, filename)
                destination = os.path.join(bigWigPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.endswith("_Peaks.bb"):
                source = os.path.join(root, filename)
                destination = os.path.join(bigBedPath,filename)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
            if filename.startswith(prefix + "_ChExMix_(bed).bed"):
                source = os.path.join(root, filename)
                desname = prefix + "_chexmix_peaks.bed"
                destination = os.path.join(peaksPath,desname)
                # print destination
                print "\033[94m Copying {}\033[0m".format(filename)
                shutil.copy(source,destination)
