#!/usr/bin/python
#
# author : prashant kumar kuntala
# date   : 12th July, 2018
#


"""
Program to read a config file and WorkflowInvokeFile
to download all the required heatmaps and composites
for each sample in yepQcViz pipeline.

NOTES:
-----
TERMINAL colors

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

"""

import sys, os, argparse
import pprint,configparser
from bioblend import galaxy

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('configFile',help='yepQcViz.conf file that has galaxy url and apikey information.')
    parser.add_argument('workflowInvokeFile',help='workflowInfo.csv file that was generated by runYepQcViz.py')
    args = parser.parse_args()


    resultsFolder = os.getcwd()+"/Results"

    # config parser to take necessary options
    config = configparser.ConfigParser()
    try:
        config.read(args.configFile)
        galaxyUrl = config['BASIC']['GALAXY_URL']
        apiKey = config['BASIC']['API_KEY']
    except:
        print "\033[91m ERROR ! Unable to read config file or Missing the required Configuration fields or file not found ! \033[0m"
        exit()

    # create the results folder that has all the images.
    try:
        if os.path.exists(resultsFolder):
            print "\033[95m   Results folder exists, Using the existing folder to store images ! \033[0m"
        else:
            print "\033[95m   Creating the results folder \033[0m"
            os.mkdir(resultsFolder)
    except:
        print "\033[91m ERROR !  Unable to Create the Results folder ! \033[0m"
        exit()


    # parsing through the config file and creating a galaxy instance
    gi = galaxy.GalaxyInstance(url=galaxyUrl, key=apiKey)
    print "\033[94m  \033[1m Connected to GALAXY at : {}  \033[0m \033[0m ".format(galaxyUrl)

    # list of labels to check in order to download the corresponding png and datasets
    pngList = ['NFR','TSS','TES','NFR50','TSS50','TES50','CUT','SUT','XUT','TRNA','X-ELEMENT','Bound','All','ARS','MEME','Nucleosome','Transcription','CENTROMERE','Merge','Fasta','Create','ChExMix']

    # parsing the workflowInfoFile and processing each line.
    openfile = open(args.workflowInvokeFile,'r').readlines()
    for i in range(1,len(openfile)):
        print " \n\n"
        # #DEBUG
        # pprint.pprint(openfile[i].split(','))
        data = openfile[i].split(',')

        # generating the path for the run folder
        runPath = resultsFolder+"/"+str(data[0])

        # generating the path for the sample folder
        samplePath = resultsFolder+"/"+str(data[0])+"/"+str(data[1])+"_"+str(data[2])

        count = [0,0,0] # to keep track of 4colorplots,Merged heatmaps etc

        # checking if the run folder exists
        if os.path.exists(runPath):
            print "\033[94m   Run folder exists for {} \033[0m".format(data[0])
        else:
            print "\033[95m   Creating the run folder : {} \n   {} \033[0m".format(data[0],runPath)
            os.mkdir(runPath)

        # checking if the sample folder exists
        if os.path.exists(samplePath):
            print "\033[94m   Sample folder exists for {} \033[0m".format(data[1]+"_"+data[2])
        else:
            print "\033[95m   Creating the sample folder : {} \n   {} \033[0m".format(data[1]+"_"+data[2],samplePath)
            os.mkdir(samplePath)

        # retrieve the history for each line
        hist = gi.histories.show_history(data[3])
        # pprint.pprint(hist)

        # checking if the history is ok, successfully finished without errors.
        if hist['state'] == 'ok':
            # retrieve the ok datasets
            datasets = hist['state_ids']['ok']

            # iterating through datasets to find the required images.
            for dsid in datasets:
                # get the dataset information
                ds = gi.datasets.show_dataset(dsid)
                if ds['state'] == 'ok' and ds['name'].split(' ')[0] in pngList:
                    # if ds['name'].startswith('MEMER'):
                        # pprint.pprint(ds)

                    # pprint.pprint(ds['name'],ds['id'])
                    if ds['file_ext'] == 'png':
                        # creating the file path

                        if ds['name'].split(' ')[0] == 'Merge':
                            count[0] = count[0]+1
                            downloadFilename = "_".join(ds['name'].split(' ')[0:2])+"_"+str(count[0])+".png"
                            downloadFilePath = samplePath+"/"+downloadFilename
                        elif ds['name'].split(' ')[0] == 'Create':
                            count[1] = count[1]+1
                            downloadFilename = "_".join(ds['name'].split(' ')[0:2])+"_"+str(count[1])+".png"
                            downloadFilePath = samplePath+"/"+downloadFilename
                        elif ds['name'].split(' ')[0] == 'Fasta':
                            count[2] = count[2]+1
                            downloadFilename = "_".join(ds['name'].split(' ')[0:2])+"_"+str(count[2])+".png"
                            downloadFilePath = samplePath+"/"+downloadFilename
                        else:
                            downloadFilename = "_".join(ds['name'].split(' ')[0:2])+".png"
                            downloadFilePath = samplePath+"/"+downloadFilename
                            print " NFR : {}".format(ds['name'].split(' ')[0:2])
                    else:
                        # creating the file path in case of other files
                        downloadFilename = "_".join(ds['name'].split(' ')[0:2])+"."+str(ds['file_ext'])
                        downloadFilePath = samplePath+"/"+downloadFilename

                    print "Name: {}".format(downloadFilename)

                    # downloading the dataset
                    gi.datasets.download_dataset(ds['id'],file_path=downloadFilePath,use_default_filename=False, wait_for_completion=True,maxwait=12000)
                    print "\033[92m \033[1m SUCCESS ! \033[0m \033[0m file_name: {} \t  ext : {} \t dataset_id: {}".format(ds['name'],ds['file_ext'],ds['id'])

                    # creating the motif logos using meme2images
                    if downloadFilename == "MEME_on.txt":
                        memeLogoPath = downloadFilePath.split('/')[:-1]
                        memeLogoPath.append('memelogos')

                        command = 'meme2images -png -rc '+ downloadFilePath +" "+"/".join(memeLogoPath)
                        print command
                        os.system(command)

        else:
            print "\033[91m  ERROR ! HISTORY is {} : {}, Skipping \n   {},{} \033[0m".format(hist['state'],data[3],data[0],data[1])
            continue
