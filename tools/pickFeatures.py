#!/usr/bin/python
#
# author : prashant kumar kuntala
# date   : 10th August, 2018
#
# last modified : 13th August, 2018
#

"""
Program to pick the bound features (bed regions) from a Reference Feature bed file using the output from bedtools intersect (-u -wa) between SECTORS and multigpsPeaks.

NOTES
-----
To Select rows from a Pandas DataFrame based on values in a column
https://erikrood.com/Python_References/rows_cols_python.html

"""
from __future__ import division
import argparse
import os
import sys
import pprint
import pandas as pd


def pickRegions(bedfile, reference):
    """
    function that picks the regions from refFeature based on the 'Rank_Order' from intersection.
    """

    # reading the input bedfile
    bound = pd.read_csv(bedfile, sep="\t", names=[
                        'chrom1', 'str1', 'stp1', 'r1', 'category', 'strand'])
    # print bound[0:10]
    # print "\n"

    # reading the reference feature bedfile
    refData = pd.read_csv(reference, sep="\t", names=[
                          'chrom', 'str', 'stp', 'Rank_Order', 'experimentLength', 'strand'])
    # print refData[0:10]
    # print "\n"

    # # DEBUG
    # pprint.pprint(bound.r1.unique())

    # finding the counts for each category of genes
    pprint.pprint(bound.groupby('category')['r1'].nunique())

    # creating the geneCounts.csv file
    bound.groupby('category')['r1'].nunique().to_csv('geneCounts.csv')

    # # DEBUG
    # pprint.pprint(bound.groupby('category')['r1'].nunique())

    # retrieve bound features
    boundFeatures = refData.loc[refData['Rank_Order'].isin(bound.r1.unique())]
    print boundFeatures[0:10]
    pprint.pprint(len(boundFeatures))
    print "\n"

    # checking if there are any boundFeatures
    if len(boundFeatures) > 0:
        # creating the boundSectors bedfile
        bfFile = open("boundFeatures.bed", 'w')
        print " Creating the boundFeatures file ! "
        for index, row in boundFeatures.iterrows():
            # print "{}\t{}\t{}\t{}\t{}\t{}".format(row['chrom'],row['str'],row['stp'],row['Rank_Order'],row['category'],row['strand'])
            bfFile.write("{}\t{}\t{}\t{}\t{}\t{}\n".format(
                row['chrom'], row['str'], row['stp'], row['Rank_Order'], row['experimentLength'], row['strand']))
        bfFile.flush()
        bfFile.close()
    else:
        # returning the reference bedfile, since there are zero bound features
        bfFile = open("boundFeatures.bed", 'w')
        print " Zero bound features found ! returning Reference feature file ! "
        for index, row in refData.iterrows():
            # print "{}\t{}\t{}\t{}\t{}\t{}".format(row['chrom'],row['str'],row['stp'],row['Rank_Order'],row['category'],row['strand'])
            bfFile.write("{}\t{}\t{}\t{}\t{}\t{}\n".format(
                row['chrom'], row['str'], row['stp'], row['Rank_Order'], row['experimentLength'], row['strand']))
        bfFile.flush()
        bfFile.close()


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument(
        'bedIntersectFile', help='bed file generated by Bedtools intersect using (-wa -u)')
    parser.add_argument(
        'refFeature', help='Bed file to pick the regions based on the matches in bedIntersectFile')
    args = parser.parse_args()

    # function call
    pickRegions(args.bedIntersectFile, args.refFeature)
